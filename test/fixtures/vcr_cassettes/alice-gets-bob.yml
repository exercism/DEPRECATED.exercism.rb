---
http_interactions:
- request:
    method: get
    uri: http://localhost:4567/api/v1/user/assignments/current?key=634abfb095ed621e1c793c9875fcd9fda455ea90
    body:
      encoding: US-ASCII
      string: ''
    headers:
      user-agent:
      - exercism-CLI v0.0.3
      accept-encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      accept:
      - ! '*/*'
  response:
    status:
      code: 200
      message: OK
    headers:
      content-type:
      - text/html;charset=utf-8
      x-xss-protection:
      - 1; mode=block
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      connection:
      - close
      content-length:
      - '3558'
    body:
      encoding: US-ASCII
      string: ! '{"assignments":[{"track":"ruby","slug":"bob","readme":"# Bob\n\nBob
        is a lackadaisical teenager. In conversation, his responses are very limited.\n\nBob
        answers ''Sure.'' if you ask him a question.\n\nHe answers ''Whatever.'' if
        you tell him something.\n\nHe answers ''Woah, chill out!'' if you yell at
        him (ALL CAPS).\n\nHe says ''Fine. Be that way!'' if you address him without
        actually saying anything.\n\nBob, Inspired by the 90s, is bringing back \"l33t
        sP34k\", and he''ll teach you how to do it. Start any sentence with \"Bro,
        \", and he''ll translate the rest of it into l33t sP34k for you.\n\n## Hints\n\n`gets`,
        _get string_ is the opposite of `puts` _put string_.\n\nNotice that when you
        type \"Something\" and then hit enter, you get the string\n`\"Something\\n\"`\n\n\n##
        Source\n\nInspired by the ''Deaf Grandma'' exercise in Chris Pine''s Learn
        to Program tutorial. [view source](http://pine.fm/LearnToProgram/?Chapter=06)\n","test_file":"test.rb","tests":"require
        ''minitest/autorun''\nrequire ''minitest/pride''\nrequire_relative ''bob''\n\nclass
        BobTest < MiniTest::Unit::TestCase\n  attr_reader :bob\n\n  def setup\n    @bob
        = Bob.new\n  end\n\n  def test_stating_something\n    assert_equal ''Whatever.'',
        bob.hey(''Tom-ay-to, tom-aaaah-to.'')\n  end\n\n  def test_shouting\n    skip\n    assert_equal
        ''Woah, chill out!'', bob.hey(''WATCH OUT!'')\n  end\n\n  def test_asking_a_question\n    skip\n    assert_equal
        ''Sure.'', bob.hey(''Does this cryogenic chamber make me look fat?'')\n  end\n\n  def
        test_talking_forcefully\n    skip\n    assert_equal ''Whatever.'', bob.hey(\"Let''s
        go make out behind the gym!\")\n  end\n\n  def test_shouting_numbers\n    skip\n    assert_equal
        ''Woah, chill out!'', bob.hey(''1, 2, 3 GO!'')\n  end\n\n  def test_shouting_with_special_characters\n    skip\n    assert_equal
        ''Woah, chill out!'', bob.hey(''ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!'')\n  end\n\n  def
        test_silence\n    skip\n    assert_equal ''Fine, be that way.'', bob.hey('''')\n  end\n\nend\n"},{"track":"javascript","slug":"anagram","readme":"#
        Anagram\n\nWrite a program that, given a word and a list of possible anagrams,
        selects the correct one(s).\n\nIn other words, given: `\"listen\"` and `%w(enlists
        google inlets banana)` the program should return \"inlets\".\n\n\n## Source\n\nInspired
        by the Extreme Startup game [view source](https://github.com/rchatley/extreme_startup)\n","test_file":"test.spec.js","tests":"require(''./anagram'');\n\ndescribe(''Anagram'',
        function() {\n\n  it(\"no matches\",function() {\n    var detector = new Anagram(\"diaper\");\n    var
        matches = detector.match([ \"hello\", \"world\", \"zombies\", \"pants\"]);\n    expect(matches).toEqual([]);\n  });\n\n  it(\"detects
        simple anagram\",function() {\n    var detector = new Anagram(\"ba\");\n    var
        matches = detector.match([''ab'', ''abc'', ''bac'']);\n    expect(matches).toEqual([''ab'']);\n  });\n\n  it(\"detects
        multiple anagrams\",function() {\n    var detector = new Anagram(\"abc\");\n    var
        matches = detector.match([''ab'', ''abc'', ''bac'']);\n    expect(matches).toEqual([''abc'',
        ''bac'']);\n  });\n\n  it(\"detects anagram\",function() {\n    var detector
        = new Anagram(\"listen\");\n    var matches = detector.match([''enlists'',
        ''google'', ''inlets'', ''banana'']);\n    expect(matches).toEqual([''inlets'']);\n  });\n\n  it(\"detects
        multiple anagrams\",function() {\n    var detector = new Anagram(\"allergy\");\n    var
        matches = detector.match([''gallery'', ''ballerina'', ''regally'', ''clergy'',
        ''largely'', ''leading'']);\n    expect(matches).toEqual([''gallery'', ''regally'',
        ''largely'']);\n  });\n});"}]}'
    http_version: '1.1'
  recorded_at: Mon, 10 Jun 2013 22:30:44 GMT
recorded_with: VCR 2.5.0
